package controllers

import (
	"github.com/gin-gonic/gin"
	"github.com/juancsr/quasar-attack-operation/constants"
	"github.com/juancsr/quasar-attack-operation/models"
	"github.com/juancsr/quasar-attack-operation/utils"
)

// input: The message that is recived for each satellite
// output: The message generated by the message issuer
func getMessage(messages ...[]string) (msg string) {
	return "cool"
}

func DecriptMessage(c *gin.Context) {
	var response models.MotherShip

	distances := []float32{}
	messages := [][]string{}

	var body struct {
		Satellites []models.Satellite `json:"satellites" binding:"required"`
	}

	if c.ShouldBind(&body) != nil {
		c.AbortWithStatus(constants.NotFound_404)
	}

	for _, satellite := range body.Satellites {
		distances = append(distances, satellite.Distance)
		messages = append(messages, satellite.Message)
	}

	defer func() {
		if r := recover(); r != nil {
			c.JSON(constants.NotFound_404, gin.H{"message": r})
		}
	}()

	x, y := utils.GetLocation(distances...)

	message := getMessage(messages...)

	mothership := models.MotherShip{
		Position: models.Position{X: x, Y: y},
		Message:  message,
	}

	response = mothership

	c.JSON(constants.OK_200, response)
}
